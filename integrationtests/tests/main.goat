### Tests

// Get store items

GET {{.instance}}/api/items

[Script]
debug(response);
assert_eq(response.StatusCode, 200, "status code");
var items = response.Body;

---

// Create a list

POST {{.instance}}/api/lists

[Body]
{}

[Script]
debug(response);
assert_eq(response.StatusCode, 201, "status code");
var listId = response.Body.id;
info("created list with id =", listId);

---

// Get created list

GET {{.instance}}/api/lists/{{.listId}}

[Script]
debug(response);
assert_eq(response.StatusCode, 200, "status code");
assert(response.Body.orders == null || response.Body.orders.length == 0, "no orders in list");

---

// Try to create an order in an invalid list; should fail

POST {{.instance}}/api/lists/someInvalidListId/orders

[Body]
{
    "creator": "zekro",
    "store_items": [
        {
            "id": "someInvalidItemId"
        }
    ]
}

[Script]
debug(response);
assert_eq(response.StatusCode, 404, "status code");

---

// Try to create an order with empty values; shoud fail

POST {{.instance}}/api/lists/{{.listId}}/orders

[Body]
{
    "creator": "",
    "store_items": [
        {
            "id": ""
        }
    ] 
}

[Script]
debug(response);
assert_eq(response.StatusCode, 400, "status code");

---

// Try to create an order with an invalid item ID; should fail

POST {{.instance}}/api/lists/{{.listId}}/orders

[Body]
{
    "creator": "zekro",
    "store_items": [
        {
            "id": "someInvalidItemId"
        }
    ]
}

[Script]
debug(response);
assert_eq(response.StatusCode, 400, "status code");

---

// Try to create an order with a valid item ID

POST {{.instance}}/api/lists/{{.listId}}/orders

[PreScript]
var item = items.categories[0].items[0];
var variant = item.variants[0].name;

[Body]
{
    "creator": "zekro",
    "store_items": [
        {
            "id": "{{.item.id}}",
            "variants": [
                "{{.variant}}"
            ]
        }
    ]
}

[Script]
debug(response);
assert_eq(response.StatusCode, 201, "status code");

---

// Check orders in list

GET {{.instance}}/api/lists/{{.listId}}

[Script]
debug(response);
assert_eq(response.StatusCode, 200, "status code");
assert_eq(response.Body.orders.length, 1, "one order in list");
assert_eq(response.Body.orders[0].creator, "zekro", "order creator");
assert_eq(response.Body.orders[0].store_items[0].id, item.id, "order item id");
assert_eq(response.Body.orders[0].store_items[0].variants, [variant], "order item variants");

---

### Teardown

DELETE {{.instance}}/api/lists/{{.listId}}

[Script]
assert_eq(response.StatusCode, 204, "status code");